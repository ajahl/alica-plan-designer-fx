package de.unikassel.vs.alica.planDesigner.command.delete;

import de.unikassel.vs.alica.planDesigner.alicamodel.Plan;
import de.unikassel.vs.alica.planDesigner.command.Command;
import de.unikassel.vs.alica.planDesigner.events.ModelEventType;
import de.unikassel.vs.alica.planDesigner.modelmanagement.ModelManager;
import de.unikassel.vs.alica.planDesigner.modelmanagement.ModelModificationQuery;
import de.unikassel.vs.alica.planDesigner.modelmanagement.Types;
import de.unikassel.vs.alica.planDesigner.uiextensionmodel.UiExtension;

import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;

public class DeletePlan extends Command {

    protected Plan plan;
    protected UiExtension uiExtension;
    private String textH;
    private String textCPP;
    private File pathH;
    private File pathCPP;

    public DeletePlan(ModelManager manager, ModelModificationQuery mmq) {
        super(manager, mmq);
        plan = (Plan) manager.getPlanElement(mmq.getElementId());
        uiExtension = modelManager.getUiExtensionMap().get(mmq.getElementId());
    }

    @Override
    public void doCommand() {
        if (plan == null) {
            return;
        }
        //Get the generated Files
        String path = modelManager.getGeneratedFilesForAbstractPlan(plan);
        path = path.replace("[","");
        path = path.replace("]","");
        String[] split = path.split(", ");
        pathH = new File(split[0]);
        pathCPP = new File(split[1]);
        if(pathH.exists() && pathCPP.exists()) {
            try {
                textH = new String (Files.readAllBytes(Paths.get(pathH.toString())));
                textCPP = new String (Files.readAllBytes(Paths.get(pathCPP.toString())));
            } catch (Exception e) {
                e.getMessage();
            }
            pathH.delete();
            pathCPP.delete();
        } else {
            System.out.println("ERROR:" + plan.getName() + ".h and " + plan.getName() + ".cpp are not autogenerated!!!");
        }
        modelManager.dropPlanElement(Types.PLAN, plan, true);
        this.fireEvent(ModelEventType.ELEMENT_DELETED, this.plan);
    }

    @Override
    public void undoCommand() {
        if (plan == null) {
            return;
        }
        //Write back the autogenerated files, if available
        try {
            if(!textH.isEmpty()) {
                PrintWriter writerH = new PrintWriter(new FileWriter(pathH, true));
                writerH.print(textH);
                writerH.close();
            }
            if(!textCPP.isEmpty()) {
                PrintWriter writerCPP = new PrintWriter(new FileWriter(pathCPP, true));
                writerCPP.print(textCPP);
                writerCPP.close();
            }
        } catch (Exception e) {
            System.out.println("ERROR: ");
        }

        // The UiExtension has been deleted with the plan, so it needs to be put back into the map
        modelManager.getUiExtensionMap().put(mmq.getElementId(), uiExtension);
        if (!plan.getMasterPlan()) {
            modelManager.storePlanElement(Types.PLAN, plan, true);
        } else {
            modelManager.storePlanElement(Types.MASTERPLAN, plan, true);
        }
        this.fireEvent(ModelEventType.ELEMENT_CREATED, this.plan);
    }
}
